version: "3.8"

# Naming the project allows us to use it when deleting containers so we can target only ones
# generated by this project
# https://docs.docker.com/compose/environment-variables/envvars/#compose_project_name
name: cuttle

# Share volumes between images, see https://stackoverflow.com/a/62873977
#  - https://docs.docker.com/compose/compose-file/07-volumes/
#  - https://docs.docker.com/compose/compose-file/compose-file-v3/#extension-fields
x-app-volume:
  &app-volume
    - type: bind
      source: ../src
      target: /cuttle/src

services:
  database:
    container_name: database
    image: 'postgres:latest'
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=cuttle
      - POSTGRES_USER=cuttlesworth
      - POSTGRES_PASSWORD=p4ssw0rd!
      # Allow all connections, no password required (not recommended)
      # - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - ./data/pgdata:/var/lib/postgresql/data
    restart: always

  server:
    container_name: server
    # Required to be able to hit http://server:1337 from the browser via the client container
    hostname: server
    environment:
      - CUTTLE_DOCKERIZED=true
      - DATABASE_URL=postgresql://cuttlesworth:p4ssw0rd!@database:5432/cuttle
      # Can set this to staging for the postgres database to work in docker but may need to modify
      # the onlyAllowOrigins setting in `config/env/staging.js` file
      - NODE_ENV=staging
      - VITE_API_URL=http://localhost:1337
      - VITE_BUILD_OUTPUT=assets
    # No env file because docker is different :)
    # env_file:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
    command: npm run start:server
    ports:
      - "1337:1337"
    volumes: *app-volume
    depends_on:
      - database

  client:
    container_name: client
    environment:
      - CUTTLE_DOCKERIZED=true
      - VITE_API_URL=http://localhost:1337
      - VITE_BUILD_OUTPUT=assets
    # No env file because docker is different :)
    # env_file:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
    command: npm run start:client
    ports:
      - "8080:8080"
    volumes: *app-volume
    depends_on:
      - server
